cmake_minimum_required(VERSION 3.5)
project(cpp_spider)

if (UNIX)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_FLAGS "-lboost_system -lsfml-graphics -lsfml-window -lsfml-system -lpthread")
    FILE(GLOB server_source ./src_server/*.cpp)
    add_executable(server ${server_source})
    find_package(Threads)
    find_package(Boost 1.58 COMPONENTS filesystem regex)
    target_link_libraries (server ${CMAKE_THREAD_LIBS_INIT})
    set(Boost_USE_STATIC_LIBS        ON)
    set(Boost_USE_MULTITHREADED      ON)
    set(Boost_USE_STATIC_RUNTIME    OFF)
	set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2/share/SFML/cmake/Modules ${CMAKE_MODULE_PATH})
    find_package( SFML 2 REQUIRED COMPONENTS audio graphics window system)
	if(SFML_FOUND)
		include_directories(${SFML_INCLUDE_DIR})
		target_link_libraries(server ${SFML_DEPENDENCIES})
		target_link_libraries(server ${SFML_LIBRARIES})
      endif()
    if(Boost_FOUND)
        message(STATUS "It works!")
        include_directories(${Boost_INCLUDE_DIRS})
        target_link_libraries(server ${Boost_LIBRARIES})
	endif()
endif(UNIX)

if (WIN32)
#    set(OpenSSL_Path "C:/OpenSSL-Win32/include")
#    set(OpenSSL_INCLUDE_DIR "${OpenSSL_Path}")
#    find_package(OpenSSL)
#    if(OpenSSL_FOUND)
#        message(STATUS "It works!")
#        include_directories(${OpenSSL_INCLUDE_DIRS})
#    endif()
#    link_directories(C:/OpenSSL-Win32/lib)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Debug)
    set(Boost_Path ${CMAKE_CURRENT_SOURCE_DIR}/Lib/Boost/include/boost-1_65_1)
    set(Boost_INCLUDE_DIR "${Boost_Path}")
    find_package(Boost 1.65.1)
    if(Boost_FOUND)
        message(STATUS "It works!")
        include_directories(${Boost_INCLUDE_DIRS})
        link_directories(${CMAKE_CURRENT_SOURCE_DIR}/Lib/Boost/lib/)
    endif()
	FILE(GLOB server_source ./src_server/*.cpp)
     FILE(GLOB client_source ./src_client/*.cpp)
    add_executable(server ${server_source})
    add_executable(client ${client_source})
	set(SFML_STATIC_LIBRARIES TRUE)
	set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2/cmake/Modules ${CMAKE_MODULE_PATH})
	set(SFML_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/Lib/SFML-2.4.2)
	find_package( SFML 2 REQUIRED COMPONENTS audio graphics window system)
	if(SFML_FOUND)
		include_directories(${SFML_INCLUDE_DIR})
		target_link_libraries(server ${SFML_DEPENDENCIES})
		target_link_libraries(server ${SFML_LIBRARIES})
	endif()
endif(WIN32)
